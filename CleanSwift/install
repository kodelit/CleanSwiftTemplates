#!/bin/sh

SCRIPT_DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "${SCRIPT_DIR}"

# TEMPLATES_DIR=Clean\ Swift
# cd "${TEMPLATES_DIR}"

SOURCE_DIR=Source
GENERATED_TEMPLATES_DIR=Output
if [ -d "${GENERATED_TEMPLATES_DIR}" ]; then
    rm -r "${GENERATED_TEMPLATES_DIR}"
fi

# Update Scene Templates (copy files of the scene components to Scene.xctemplate)

FILE_NAME=
FILE_NAME_WITOUT_EXTENSION=

function loadFileNameFrom() {
  FILE_NAME="${1##*/}"
  FILE_NAME_WITOUT_EXTENSION="${FILE_NAME%.*}"
  # echo "file name: $FILE_NAME, without extension: $FILE_NAME_WITOUT_EXTENSION"
}

SOURCE_FILE_TOP_COMMENT=`cat ${SOURCE_DIR}/SOURCE_FILE_TOP_COMMENT.swift`

declare -a COMMON_TEMPLATES_DIR_NAMES=("Assembler.xctemplate" "Interactor.xctemplate" "Models.xctemplate" "Module.xctemplate" "Presenter.xctemplate" "Router.xctemplate" "View Model.xctemplate" "Worker.xctemplate")
declare -a SCENE_TEMPLATES_DIR_NAMES=("Assembler.xctemplate" "Interactor.xctemplate" "Models.xctemplate" "Presenter.xctemplate" "Router.xctemplate" "View Model.xctemplate" "Worker.xctemplate")
declare -a VIEW_CONTROLLER_NAMES=("UICollectionViewController" "UITableViewController" "UIViewController")

SCENE_TEMPLATE_DIR_NAME=Scene.xctemplate
SCENE_TEMPLATE_SOURCE_DIR="${SOURCE_DIR}/${SCENE_TEMPLATE_DIR_NAME}"
VIEW_CONTROLLER_TEMPLATE_DIR_NAME=View\ Controller.xctemplate
VIEW_CONTROLLER_SOURCE_DIR="${SOURCE_DIR}/${VIEW_CONTROLLER_TEMPLATE_DIR_NAME}"
VIEW_CONTROLLER_SOURCE="${VIEW_CONTROLLER_SOURCE_DIR}/UIViewController/___FILEBASENAME___SceneViewController.swift"
TESTS_TEMPLATES_DIR_NAME=Unit\ Tests.xctemplate

# overrides target file if the file exists
function generateSourceFile() {
  sourceFile="${1}"
  targetDir="${2}"
  echo "Generate SOURCE file of ${sourceFile}"

  # update FILE_NAME* variable
  loadFileNameFrom "${sourceFile}"
  # target file path
  targetFile="${targetDir}/${FILE_NAME}"
  
  echo "Add SOURCE_FILE_TOP_COMMENT to ${targetFile}"
  # override/create file with comment at the top
  echo "${SOURCE_FILE_TOP_COMMENT}" > "${targetFile}"

  # append source code
  echo "Add CONTENT of ${sourceFile} to ${targetFile}"
  cat "${sourceFile}" >> "${targetFile}"
}

function generateCommonTemplates() {
  installDir="${1}"
  generateOnlySceneSourceFiles=$2

  mkdir -p "${installDir}"

  if [[ "${generateOnlySceneSourceFiles}" == false ]] ; then

    for templateDirName in "${COMMON_TEMPLATES_DIR_NAMES[@]}"; do
      sourceDir="${SOURCE_DIR}/${templateDirName}"
      targetDir="${installDir}"
      
      # copy whole templates
      targetDir="${installDir}/${templateDirName}"
      if [ -d "${targetDir}" ]; then
        rm -r "${targetDir}"
      fi
      mkdir -p "${targetDir}"
      cp -r "${sourceDir}" "${installDir}"
      
      OIFS="$IFS"
      IFS=$'\n'
      # copy all swift files from template dir to target (scene) dir
      for files in "`find "${sourceDir}" -type f -name "*.swift"`"; do
        for file in "$files"; do
          # override source file (by adding top source file comment)
          generateSourceFile "$file" "${targetDir}"
        done
      done
      IFS="$OIFS"
    done

  else

    for templateDirName in "${SCENE_TEMPLATES_DIR_NAMES[@]}"; do
      sourceDir="${SOURCE_DIR}/${templateDirName}"
      targetDir="${installDir}"
      
      OIFS="$IFS"
      IFS=$'\n'
      # copy all swift files from template dir to target (scene) dir
      for files in "`find "${sourceDir}" -type f -name "*.swift"`"; do
        for file in "$files"; do
          # override source file (by adding top source file comment)
          generateSourceFile "$file" "${targetDir}"
        done
      done
      IFS="$OIFS"
    done

  fi

  for templateDirName in "${dirNames[@]}"; do
    sourceDir="${SOURCE_DIR}/${templateDirName}"
    targetDir="${installDir}"
    
    # copy whole templates
    if [[ "${generateOnlySceneSourceFiles}" == false ]] ; then
      targetDir="${installDir}/${templateDirName}"

      if [ -d "${targetDir}" ]; then
        rm -r "${targetDir}"
      fi
      mkdir -p "${targetDir}"
      cp -r "${sourceDir}" "${installDir}"
    fi
    
    OIFS="$IFS"
    IFS=$'\n'
    # copy all swift files from template dir to target (scene) dir
    for files in "`find "${sourceDir}" -type f -name "*.swift"`"; do
      for file in "$files"; do
        # override source file (by adding top source file comment)
        generateSourceFile "$file" "${targetDir}"
      done
    done
    IFS="$OIFS"
  done
}

## COMMON TEMPLATES

generateCommonTemplates "${GENERATED_TEMPLATES_DIR}" false

## TESTS TEMPLATES

TESTS_TEMPLATES_SOURCE_DIR="${SOURCE_DIR}/${TESTS_TEMPLATES_DIR_NAME}"
TESTS_TEMPLATES_TARGET_DIR="${GENERATED_TEMPLATES_DIR}/${TESTS_TEMPLATES_DIR_NAME}"

cp -r "${TESTS_TEMPLATES_SOURCE_DIR}" "${GENERATED_TEMPLATES_DIR}"

OIFS="$IFS"
IFS=$'\n'
for FILE in `find "${TESTS_TEMPLATES_SOURCE_DIR}" -type f -name "*.swift"`; do
  # override source file (by adding top source file comment)
  generateSourceFile "${FILE}" "${TESTS_TEMPLATES_TARGET_DIR}"
done
IFS="$OIFS"

## VIEW CONTROLLERS TEMPLATES

for TYPE in "${VIEW_CONTROLLER_NAMES[@]}"; do
  cp -r "${VIEW_CONTROLLER_SOURCE_DIR}" "${GENERATED_TEMPLATES_DIR}"

  # generate UITableViewController temppate and
  # UICollectionViewController template according to UIViewController template
  VIEW_CONTROLLER_TARGET_DIR="${GENERATED_TEMPLATES_DIR}/${VIEW_CONTROLLER_TEMPLATE_DIR_NAME}/${TYPE}"

  mkdir -p "${VIEW_CONTROLLER_TARGET_DIR}"

  # override source files (by adding top source file comment)
  generateSourceFile "${VIEW_CONTROLLER_SOURCE}" "${VIEW_CONTROLLER_TARGET_DIR}"
done

## SCENE TEMPLATES

cp -r "${SCENE_TEMPLATE_SOURCE_DIR}" "${GENERATED_TEMPLATES_DIR}"

for TYPE in "${VIEW_CONTROLLER_NAMES[@]}"; do
  SCENE_SOURCE_DIR=${SOURCE_DIR}/${SCENE_TEMPLATE_DIR_NAME}/${TYPE}
  SCENE_TARGET_DIR=${GENERATED_TEMPLATES_DIR}/${SCENE_TEMPLATE_DIR_NAME}/${TYPE}

  GENERATE_ONLY_SOURCE_FILE=true
  generateCommonTemplates "${SCENE_TARGET_DIR}" $GENERATE_ONLY_SOURCE_FILE

  # copy view controller files for current type
  generateSourceFile "${VIEW_CONTROLLER_SOURCE}" "${SCENE_TARGET_DIR}"
done

## COPY TEMPLATES TO INSTALLATION DIR

INSTALL_DIR=~/Library/Developer/Xcode/Templates/File\ Templates/Clean\ Swift\ \(kodelit\)
cd "${GENERATED_TEMPLATES_DIR}"

echo "\n Templates will be installed to ${INSTALL_DIR}"
if [ -d "${INSTALL_DIR}" ]; then
    rm -r "${INSTALL_DIR}"
fi

mkdir -p "${INSTALL_DIR}"
cp -r *.xctemplate "${INSTALL_DIR}"

echo " Clean Swift templates successfully installed."

echo " Opening target directory."
open "${INSTALL_DIR}"

echo " DONE.\n"